	 /***********************************************************************************************************
	 * Method Name: 				private double _1h_Watchdog_close_to_expire()
	 * Description: 				modifies Local 1h watchdog that triggers particular messages to be sent via TCP connection based on  Global 1h watchdog time left to expiration
	 * Affected external variables: Global_24h_Watchdog.isPaused
	 * Returned value				local_1h_watchdog
	 * Called internal functions: 	processingDelay()
	 ***********************************************************************************************************/
	protected double _1h_Watchdog_close_to_expire(double _1h_watchdog, double watchdog_scale_factor, int sensor_number_of_measurements ) {
		
		// determine duration of an additional delay that is used for watchdogs synchronization
		double delay_factor = 0.5;
		//Global_1h_Watchdog.getInstance().setEnabled(false);
		if ( sensor_number_of_measurements == 23 ){
			Global_24h_Watchdog.getInstance().setEnabled(false);
		}
		
		if(_1h_watchdog > (get_watchdog_threshold(Watchdog_Thresholds.MEDIUM, getWatchdog_thresholds_array()))) {
			// this delay is intended to synchronize the measurements from all sensor if their Local_1h_watchdogs have different values that are far from the threshold
			processingDelay((int)seconds_to_miliseconds_conversion_factor * _1h_watchdog * delay_factor);
			_1h_watchdog = (_1h_watchdog - (_1h_watchdog * delay_factor));
		}
		// do not enter the additional delay if 1h watchdog value is lower that the lowest threshold and sensor_number_of_measurements equals 23
		else if ( (_1h_watchdog > get_watchdog_threshold(Watchdog_Thresholds.LOWEST, getWatchdog_thresholds_array())) && (sensor_number_of_measurements != (TCPserver.getMeasurements_limit() - 1)) ){
			delay_factor = 0.25;
			processingDelay((int)seconds_to_miliseconds_conversion_factor * _1h_watchdog * delay_factor);
		}
		
		// decrease _1h_watchdog regardless of the fact if it has been already decreased
		_1h_watchdog = (_1h_watchdog - (_1h_watchdog * delay_factor));
		
		if ( sensor_number_of_measurements == 23 ) {
			Global_24h_Watchdog.getInstance().setEnabled(true);
		}
		
		System.out.println("[Compute engine Runnable " +sensor.getSensorID()+"] _1h_watchdog equals : " + _1h_watchdog + " when leaving _1h_Watchdog_close_to_expire()");
		System.out.println("[Compute engine Runnable " +sensor.getSensorID()+"] Global_1h_Watchdog equals : " + Global_1h_Watchdog.getInstance().getTimeLeftBeforeExpiration() + " when leaving _1h_Watchdog_close_to_expire()");
		//Global_1h_Watchdog.getInstance().setEnabled(true);
		return _1h_watchdog;
	}