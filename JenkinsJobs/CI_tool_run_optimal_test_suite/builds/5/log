Started by upstream project "[8mha:////4BVBxT9v/iS6BuLx4cgdTd5Bnq/1vGAYPwRYiQz/PZlCAAAAwB+LCAAAAAAAAP9djbENwjAURD9BMAAlomGBuKOBVGlAAhoGsEz4Shw+/pb9g8garAENQzAOOxCJilxzp9PT3fMDoxhgXjWnyC4t2EUmTHd8Qlq3HgNZd96zIPw0SABuAWY9/g9dZI9XdvfvBJINjAldKdUWhk0ggcm2NlejyLhSHSRYVy67uWlvLv95/9d3YSGwUjUfVb7Rwkw6NE77Vip2OhbBeulqHZGwEM1e7MWQFoyiY2MF1Re4Ebpr8QAAAA==[0mCI_tool_run_python_script_to_select_optimal_test_suite" build number [8mha:////4HZfFlkqqzgPERI0NjWGpEoWAdjXzmqiAsmAOpKOWynwAAAAwB+LCAAAAAAAAP9djbENwjAURD9BMAAlomGBuIIGpUoDEtAwgGXCV+Lw8bfsH0TWYA1oGIJx2AEQFbnmTqenu/sLBjHAtGoOkV1asItMmG74gLRsPQay7rhlQfiplwBcAkw6/B86z26P7OqfCSQrGBK6Uqo19JtAAqN1bc5GkXGl2kmwrlx85sadufzn3V//DQKZqnmv8pUWZtKhcdq3UrHTsQjWy6fWEQkL0ezFngxpwSg6NlZQzd42/6Zn8gAAAA==[0m5
originally caused by:
 Started by upstream project "[8mha:////4JGoR6eAZ9ZtJiBhlR9FgB8vtUV78l7vbt/Lt/Wxq9WDAAAAuB+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAy1EgYd/az8JH1nz/iS/Pyc+OLKvOSMovy8zKrU+Jz85MSc+KLUgvzizJL8oszUYn0AxXsr3+EAAAA=[0mCI_tool_synchronize_local_repositories" build number [8mha:////4PRmZ3KkkA7zIzJGhvTd4AtiG4FRMjayZKeffKlvTvHjAAAAtx+LCAAAAAAAAP9djbENwjAQRY8gGIAS0TAAcQcFSpWGSIGGASwTrMThdGfZDiKMwRrQMATjsAOgVOQ3/xdP7z/eMPIO5lVz9ExxweQZdbzlo8ZNa7VDQ6cdBw1dBhHAxcGsx/+hy+T+TG72FUGUwRg1laHKYdg4DDDJa3VWAhWVYh+coXL91U17urTr/q/9jQALUfNBpJkMzCh9S0XlmMxVS+RCoXTasjeBndFerD4Vs8MO4gAAAA==[0m7
 originally caused by:
  Started by upstream project "[8mha:////4MuHVOlvhDOr6u2K9Q6fnJxW37dsh4h3GWWeBr3bNQCMAAAAqB+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzJEgZ5/az8JH1nz/iS/Pyc+KTSzJyUeKBR6empRfEgGQC0MYaa1AAAAA==[0mCI_tool_build_trigger_job" build number [8mha:////4CWpiI2uJ6O9aM2PWbMHllaA8+10OlhoSrPn2Yu7QamPAAAAqh+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAymEgZF/az8JH1nz/iS/Pyc+KTSzJyUeKBR6empRfEgGUNzAEHMAUDWAAAA[0m17
  originally caused by:
   Started by user [8mha:////4EdD9UM5KdDpn/jCiCpN2Fu0oJiFmCGa45AympJ/V112AAAAmB+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAy2EgYe/dLi1CL9xLyU4qpUADhs7M7BAAAA[0mAndSze
Building in workspace C:\Projects\Test_Integration_Jenkins\CI_tool\Jenkins\workspace\CI_tool_run_optimal_test_suite
[CI_tool_run_optimal_test_suite] $ cmd.exe /C "mvn -f C:\Projects\Test_Integration_Jenkins\CI_tool\master\JavaWorkspace_MT\UnitUnderTest\updated_pom.xml clean test -P dev && exit %%ERRORLEVEL%%"
[INFO] Scanning for projects...
[INFO] 
[INFO] ------------------------< andsze:UnitUnderTest >------------------------
[INFO] Building UnitUnderTest 0.0.1-SNAPSHOT
[INFO] --------------------------------[ jar ]---------------------------------
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ UnitUnderTest ---
[INFO] Deleting C:\Projects\Test_Integration_Jenkins\CI_tool\master\JavaWorkspace_MT\UnitUnderTest\target
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ UnitUnderTest ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-compiler-plugin:3.5:compile (default-compile) @ UnitUnderTest ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 36 source files to C:\Projects\Test_Integration_Jenkins\CI_tool\master\JavaWorkspace_MT\UnitUnderTest\target\classes
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-resources-plugin:2.6:testResources (default-testResources) @ UnitUnderTest ---
[INFO] Using 'UTF-8' encoding to copy filtered resources.
[INFO] Copying 0 resource
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-compiler-plugin:3.5:testCompile (default-testCompile) @ UnitUnderTest ---
[INFO] Changes detected - recompiling the module!
[INFO] Compiling 50 source files to C:\Projects\Test_Integration_Jenkins\CI_tool\master\JavaWorkspace_MT\UnitUnderTest\target\test-classes
[INFO] 
[8mha:////4JhNr9f5fXnuM4nCi/n2AGJcIl/QHiyD8imrwPXFEtEYAAAAYB+LCAAAAAAAAP9b85aBtbiIQSmjNKU4P0+vJLE4u1gvPjexLDVPzxdEGvvmZ+X75ZekLlOVfvTjc8FPJgaGiiIGKaiG5Py84vycVD1nCA1SyAABjCCFBQCV27OjYAAAAA==[0m[INFO] --- maven-surefire-plugin:2.19.1:test (default-test) @ UnitUnderTest ---

-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running tcpClient.ClientManagerTest
		Test Run 1 Purpose:
Verify that once the overloaded constructor of the ClientManager class is being called, sensor_ID, input and output stream for the ClientManger class instance are set
		Test Run 1 Logic:
		Test Run 1 teardown section:
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that once the overloaded constructor of the ClientManager class is being called, the isClientManagerRunning flag that indicates if  the ClientManger class is active is set to true
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 2 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that once the default constructor of the ClientManager class is being called, an instance of the ClientManager class is created with its attributes set to default values
		Test Run 3 Logic:
		Test Run 3 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.634 sec - in tcpClient.ClientManagerTest
Running tcpClient.MessagesHandlerTest
		Test Run 1 Purpose:
Verify that once the messagesHandler() function is called while the isClientManagerRunning flag is equal to true, the client manager class instance that runs the messagesHandler() function is able to read messages send from TCPserver
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoQuerry has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
Server Thread Stopped.
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Serversocket closed

		Test Run 2 Purpose:
Verify that once the messagesHandler() function is called while the isClientManagerRunning flag is set to false, the client manager class instance that runs the messagesHandler() function is NOT able to read messages send from TCPserver
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that once the messagesHandler() function is called, it hangs in the readMessage() function until it gets a new message from TCPserver. 
It is verified also that the state machine of messagesHandler() function is executed for all messages received from TCPserver, but every time the currently processing message is different from the previous
		Test Run 3 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoQuerry has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo.
[ClientManager 1] ServerMessage_SensorInfoQuerry has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that once the messagesHandler() function receives any message from TCPserver that has different sensor ID than the sensor ID that is written to the Client Manager class instance, 
the state machine of messagesHandler() function sends ClientMessage_SensorInfo with the new sensor ID to confirm that this sensor ID was set intentionally. Verify also that the new sensor ID is also set for the sensor in Client_Sensors_LIST.
		Test Run 4 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] message with invalid sensor ID has been received.
[TCPclient 2] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 2] ServerMessage_ACK has been received.
[ClientManager 2] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 2] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 2] is being closed for sensor ID: 2
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.849 sec - in tcpClient.MessagesHandlerTest
Running tcpClient.MessagesHandler_ServerMessage_ACKTest
		Test Run 1 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_ACK with ClientMessage_ACK
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that the messagesHandler() sets the isClientManagerRunning flag to false, synchronizes Local_1h_Watchdog.timeLeftBeforeExpiration with Global_1h_Watchdog.timeLeftBeforeExpiration received in ServerMessage_ACK and enables Local_1h_Watchdog if ServerMessage_ACK was received when the wait_for_measurement_history flag is set to false
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that the messagesHandler() disables Local_1h_Watchdog if ServerMessage_ACK was received when the wait_for_measurement_history flag is set to true
		Test Run 3 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	2
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	3
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	4
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] ack_alert is set to true - the sensor waits for ServerMessage_Request_MeasurementHistory.
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to confirm that ClientMessage_MeasurementData has been sent - wait for ServerMessage_Request_MeasurementHistory.
[ClientManager 1] ServerMessage_Request_MeasurementHistory has been received.
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] responds to ServerMessage_Request_MeasurementHistory with ClientMessage_MeasurementHistory.
[ClientManager 1] Sensor is being reset once ClientMessage_MeasurementHistory is sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.324 sec - in tcpClient.MessagesHandler_ServerMessage_ACKTest
Running tcpClient.MessagesHandler_ServerMessage_Request_MeasurementDataTest
		Test Run 1 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData if the wait_for_measurement_data flag is set to true as a result of the prevoius processing of ServerMessage_SensorInfoUpdate by the state machine of messagesHandler()
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
Server Thread Stopped.
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Serversocket closed

		Test Run 2 Purpose:
Verify that the messagesHandler() function ignores ServerMessage_Request_MeasurementData if the wait_for_measurement_data flag is NOT set to true
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: PRE_OPERATIONAL
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that the messagesHandler() function generates a new measurement that is sent in ClientMessage_MeasurementData. 
Verify also that the sensor instance in Client_Sensors_LIST is updated with the newest measurement and its numberOfMeasurements is increased.
		Test Run 3 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that the messagesHandler() function sets back the wait_for_measurement_data to false, hence it is not possible to send more than one measurement data within one TCP connection cycle
		Test Run 4 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoQuerry has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.529 sec - in tcpClient.MessagesHandler_ServerMessage_Request_MeasurementDataTest
Running tcpClient.MessagesHandler_ServerMessage_Request_MeasurementHistoryTest
		Test Run 1 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_Request_MeasurementHistory with ClientMessage_MeasurementHistory if the wait_for_measurement_history flag is set to true as a result of reaching of the mesurement limit by the latest ServerMessage_Request_MeasurementData
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	2
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	3
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	4
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] ack_alert is set to true - the sensor waits for ServerMessage_Request_MeasurementHistory.
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_Request_MeasurementHistory has been received.
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] responds to ServerMessage_Request_MeasurementHistory with ClientMessage_MeasurementHistory.
[ClientManager 1] Sensor is being reset once ClientMessage_MeasurementHistory is sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

		Test Run 2 Purpose:
Verify that the messagesHandler() function ignores ServerMessage_Request_MeasurementHistory if the wait_for_measurement_history flag is NOT set to true
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: PRE_OPERATIONAL
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 2 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

		Test Run 3 Purpose:
Verify that the messagesHandler() function reads all measurement data from the current cycle and sends it in ClientMessage_MeasurementHistory. 
Verify also that the state machine of messagesHandler() resets the sensor instance upon completion of ServerMessage_Request_MeasurementHistory processing
		Test Run 3 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	1
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	2
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	3
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	4
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_Request_MeasurementData has been received.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] ack_alert is set to true - the sensor waits for ServerMessage_Request_MeasurementHistory.
[ClientManager 1] responds to ServerMessage_Request_MeasurementData with ClientMessage_MeasurementData.
[ClientManager 1] ServerMessage_Request_MeasurementHistory has been received.
[ClientManager 1] sensor: 	1 has the following number of measurements: 	5
[ClientManager 1] responds to ServerMessage_Request_MeasurementHistory with ClientMessage_MeasurementHistory.
[ClientManager 1] Sensor is being reset once ClientMessage_MeasurementHistory is sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1.2 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.391 sec - in tcpClient.MessagesHandler_ServerMessage_Request_MeasurementHistoryTest
Running tcpClient.MessagesHandler_ServerMessage_SensorInfoQuerryTest
		Test Run 1 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoQuerry has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoQuerry with ClientMessage_SensorInfo.
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.264 sec - in tcpClient.MessagesHandler_ServerMessage_SensorInfoQuerryTest
Running tcpClient.MessagesHandler_ServerMessage_SensorInfoUpdateTest
		Test Run 1 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp if the received sensor state is either SensorState.MAINTENANCE or SensorState.PRE_OPERATIONAL.
Verify also that the sensor instance in Client_Sensors_LIST is updated with the new settings a the new sensor state and the resetSensor() function is called.
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: MAINTENANCE
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: PRE_OPERATIONAL
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK if the received sensor state is SensorState.OPERATIONAL. 
Verify also that the sensor instance in Client_Sensors_LIST is updated with the received watchdog_scale_factor and sensor state.
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that the messagesHandler() function responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK if the received sensor state is SensorState.DEAD. 
Verify also that the sensor instance in Client_Sensors_LIST is updated with the sensor state and the isClientManagerRunning is set to false.
		Test Run 3 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: DEAD
[ClientManager 1] SensorState.DEAD causes the connection with the server to stop 
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 36.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: DEAD
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 3 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

		Test Run 4 Purpose:
Verify that the messagesHandler() function updates watchdogs_scale_factor and measurements_limit of the TCPclient class instance regardless of the received sensor state in ServerMessage_SensorInfoUpdate. 
Verify also that Local_1h_Watchdog is enabled and its timeLeftBeforeExpiration is synchronized with Global_1h_Watchdog.timeLeftBeforeExpiration that was received in ServerMessage_SensorInfoUpdate.
		Test Run 4 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_BootUp.
[ClientManager 1] Sensor is being reset once ClientMessage_BootUp is being sent
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1300.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: PRE_OPERATIONAL
[ClientManager 1] ServerMessage_ACK has been received.
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 1300.0 [s]
[ClientManager 1] responds to ServerMessage_ACK with ClientMessage_ACK to end the server-client connection successfully.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 4 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

		Test Run 5 Purpose:
Verify that the messagesHandler() function sets the is ClientManagerRunning flag to false to close the TCP connection if the sensor state is set to SensorState.OPERATIONAL 
and the received Global_1h_Watchdog.timeLeftBeforeExpiration is higher than Local_1h_Watchdog._1h_WatchdogExpiration divided by 4.
		Test Run 5 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
[ClientManager 1] ServerMessage_SensorInfoUpdate has been received.
[ClientManager 1] responds to ServerMessage_SensorInfoUpdate with ClientMessage_ACK.
[TCPclient 1] sensor instance in Client_Sensors_LIST has been updated
[ClientManager 1] Local_1h_Watchdog for the sensor has been synchronized and it equals: 900.0 [s]
[ClientManager 1] ServerMessage_SensorInfoUpdate has the following SensorState: OPERATIONAL
[ClientManager 1] if sensor receives go to OPERATIONAL message, ClientManager is being closed since its Local_1h_Watchdog is not close to expire
[ClientManager 1] it will be launched agan once its Local_1h_Watchdog: 900.0[s] will reach threshold for launching the TCP connection.
[ClientManager 1] is being closed for sensor ID: 1
		Test Run 5 teardown section:
Server Thread Stopped.
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Serversocket closed

Tests run: 5, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.222 sec - in tcpClient.MessagesHandler_ServerMessage_SensorInfoUpdateTest
Running tcpClient.SendMessageTest
		Test Run 1 Purpose:
Verify that the sendMessage() function for the ClientManager class instance writes an object to the previously opened object output stream for a client socket
		Test Run 1 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 1 teardown section:
Server Thread Stopped.
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Serversocket closed

		Test Run 2 Purpose:
Verify that SocketException is thrown if there was an attempt to call the sendMessage() function for a client manager class instance that has its object output stream closed
		Test Run 2 Logic:
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 2 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values
Server Thread Stopped.
Serversocket closed

		Test Run 3 Purpose:
Verify that IllegalArgumentException is thrown if there was an attempt to call the sendMessage() function for a client manager class instance without initializing its object output stream
		Test Run 3 Logic:
		Test Run 3 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.372 sec - in tcpClient.SendMessageTest
Running tcpClient.TCPclientTest
		Test Run 1 Purpose:
Verify that the Connect Exception is returned if there was an attempt to call the overloaded constructor of the TCPclient without a server instance initialized previously
		Test Run 1 Logic:
		Test Run 1 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that once the overloaded constructor of the TCPclient class is being called, the client socket is created at specific port and on given server host
		Test Run 2 Logic:
[TCPclient 1] Client Socket created on port = 9876
[TCPclient 1] Client Manager created with outputsteam and input stream
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPclient 1] Client_Sensors_LIST is updated with sensor instace with ID: 1
[TCPclient 1] Client_Sensors_LIST has the following sensor instances:
[TCPclient 1]	 loop counter: 1	with the following sensor ID:	1
		Test Run 2 teardown section:
[TCPclient 1] Socket for the sensor closed successfully
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that once the overloaded constructor of the TCPclient class is being called, the client manager for the TCPclient class instance is initialized with input and output streams
		Test Run 3 Logic:
[TCPclient 1] Client Socket created on port = 9876
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPclient 1] Client Manager created with outputsteam and input stream
[TCPclient 1] Client_Sensors_LIST is updated with sensor instace with ID: 1
[TCPclient 1] Client_Sensors_LIST has the following sensor instances:
[TCPclient 1]	 loop counter: 1	with the following sensor ID:	1
		Test Run 3 teardown section:
[TCPclient 1] Socket for the sensor closed successfully
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that once the overloaded constructor of the TCPclient class is being called, the clientRunning flag is set to true
		Test Run 4 Logic:
[TCPclient 1] Client Socket created on port = 9876
[TCPclient 1] Client Manager created with outputsteam and input stream
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPclient 1] Client_Sensors_LIST is updated with sensor instace with ID: 1
[TCPclient 1] Client_Sensors_LIST has the following sensor instances:
[TCPclient 1]	 loop counter: 1	with the following sensor ID:	1
		Test Run 4 teardown section:
[TCPclient 1] Socket for the sensor closed successfully
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 5 Purpose:
Verify that once the overloaded constructor of the TCPclient class is being called with a unique senor ID , Client_Sensors_LIST is updated with the newly created SensorImpl class instance with specified sensorID
		Test Run 5 Logic:
[TCPclient 1] Client Socket created on port = 9876
[TCPclient 1] Client Manager created with outputsteam and input stream
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPclient 1] Client_Sensors_LIST is updated with sensor instace with ID: 1
[TCPclient 1] Client_Sensors_LIST has the following sensor instances:
[TCPclient 1]	 loop counter: 1	with the following sensor ID:	1
		Test Run 5 teardown section:
[TCPclient 1] Socket for the sensor closed successfully
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 6 Purpose:
Verify that once the overloaded constructor of the TCPclient class is being called with a senor ID that already exists for a sensor in Client_Sensors_LIST, the list is not being updated and no SensorImpl class instance is created
		Test Run 6 Logic:
[TCPclient 1] Client Socket created on port = 9876
[TCPclient 1] Client Manager created with outputsteam and input stream
[Compute engine Runnable] Multithreaded Server Service has been started
[TCPclient 1] Client_Sensors_LIST is updated with sensor instace with ID: 1
[TCPclient 1] Client_Sensors_LIST has the following sensor instances:
[TCPclient 1]	 loop counter: 1	with the following sensor ID:	1
[TCPclient 1] Client Socket created on port = 9876
[TCPclient 1] Client Manager created with outputsteam and input stream
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 6 teardown section:
[TCPclient 1] Socket for the sensor closed successfully
[TCPclient 1] Socket for the sensor closed successfully
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 7 Purpose:
Verify that once the default constructor of the TCPclient class is being called for the first time, Client_Sensors_LIST is created
		Test Run 7 Logic:
		Test Run 7 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 8 Purpose:
Verify that once the default constructor of the TCPclient class is being called multiple times, Client_Sensors_LIST from first call of the constructor is used
		Test Run 8 Logic:
		Test Run 8 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 9 Purpose:
Verify that once the default constructor of the TCPclient class is being called for the first time, instance of Local_1h_Watchdog is created.
 Verify also that if the default constructor of the TCPclient class is called multiple times, Local_1h_Watchdog instance from first call of the constructor is used
		Test Run 9 Logic:
		Test Run 9 teardown section:
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 2.071 sec - in tcpClient.TCPclientTest
Running tcpServer.ComputeEngine_RunnableTest
		Test Run 1 Purpose:
Verify that once the default constructor of the ComputeEngine_Runnable class is called, 
outputStream and inputStream object streams are created for the purpose of setting up the TCP connection set TCPclient based on the client's socket that is 1st argument in the constructor call
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that once the default constructor of the ComputeEngine_Runnable class is called, 
local_watchdog_scale_factor is updated in accordance with global_watchdog_scale_factor
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that once the default constructor of the ComputeEngine_Runnable class is called, 
the isComputeEngine_Runnable_running flag is updated in accordance with 3rd input argument in the constructor call
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that once the default constructor of the ComputeEngine_Runnable class is called, 
time left before expiration for Local_1h_watchdog and Local_24h_watchdog is updated accordingly to the time left before expiration for Global_1h_watchdog and Global_24h_watchdog
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 5 Purpose:
Verify that once the default constructor of the ComputeEngine_Runnable class is called, 
delays_array and watchdog_thresholds_array are updated in accordance with global_watchdog_scale_factor
		Test Run 5 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 5 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 6 Purpose:
Verify that the Socket Exception is returned if there was an attempt to create a ComputeEngine_Runnable class instance with a socket that is closed
		Test Run 6 Logic:
Server Thread Started.
		Test Run 6 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.822 sec - in tcpServer.ComputeEngine_RunnableTest
Running tcpServer.RunTest
		Test Run 1 Purpose:
Verify that once the run() function is called while the isComputeEngine_Runnable_running flag is equal to true, the ComputeEngine_Runnable class instance that runs the run() function is able to read messages send from TCPserver
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_BootUp from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry.
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that once the run() function is called while the isComputeEngine_Runnable_running flag is equal to false, the ComputeEngine_Runnable class instance that runs the run() function is NOT able to read messages send from TCPserver
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_BootUp from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry.
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Runnable 1] send new setting (go to MAINTENANCE) to sensor: 1
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] ClientMessage_ACK received when neither 1h_watchdog: 36.0 [s] nor 24h_watchdog: 864.0 [s] is close to expire
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
Exception in thread "Thread-79" java.lang.NullPointerException
	at tcpServer.ComputeEngine_Runnable.run(ComputeEngine_Runnable.java:405)
	at tcpServer.RunTest$3.run(RunTest.java:162)
	at java.lang.Thread.run(Thread.java:748)
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that once the run() function is called, it hangs in the readMessage() function until it gets a new message from TCPsclient. 
It is verified also that the state machine of run() function is executed for all messages received from TCPclient, but every time the currently processing message is different from the previous
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_BootUp from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry.
[Compute engine Runnable 1] ClientMessage_BootUp from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry.
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that once the run() function receives any message from TCPclinet that has a sensor ID that is not defined for any sensor in Server_Sensors_LIST, 
the state machine of run() function ignores this message and waits for a next message
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.505 sec - in tcpServer.RunTest
Running tcpServer.Run_ClientMessage_ACKTest
		Test Run 1 Purpose:
Verify that the run() function does not update the request_measurement_data flag to true if Global_1h_Watchdog time left to expiration is higher than Watchdog_Thresholds.HIGH. 
Verify also that in this case the close_ComputeEngine_Runnable flag is set to true
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] ClientMessage_ACK received when neither 1h_watchdog: 36.0 [s] nor 24h_watchdog: 864.0 [s] is close to expire
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
[Compute engine Runnable 1] Neither 1hWatchdog nor 24hWatchdog have not been kicked
[Compute engine Runnable 1] there are 24 measurement(s) more remaining to kick 24hWatchdog
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that the run() function updates the request_measurement_data flag to true if ClientMessage_ACK has been received when Global_1h_Watchdog time left to expiration is lower than Watchdog_Thresholds.HIGH.
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.6 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.857 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.857
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.6
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that the run() function updates both Local_1h_watchdog and Local_24h_watchdog based on Global_1h_Watchdog time left to expiration by setting some delay 
in order to synchronize Locla_1h_Watchdogs for multiple sensor that are running in parallel threads if ClientMessage_ACK has been received when Global_1h_Watchdog time left to expiration is lower than Watchdog_Thresholds.HIGH.
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.6 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.898 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.898
[Compute engine Runnable 1] 24h_Watchdog global: 	1.68
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.6
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.6 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 1.199 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	1.199
[Compute engine Runnable 1] 24h_Watchdog global: 	2.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.6
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 4 Purpose:
Verify that the run() function does not update the request_measurement_data flag to true while it sets the close_ComputeEngine_Runnable flag to true if ClientMessage_ACK has been received when Global_1h_Watchdog has expired
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.0 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.0 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.0
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.0
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
[Compute engine Runnable 1] Neither 1hWatchdog nor 24hWatchdog have not been kicked
[Compute engine Runnable 1] there are 24 measurement(s) more remaining to kick 24hWatchdog
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 5 Purpose:
Verify that the run() function does not update the request_measurement_history flag to true if Global_24h_Watchdog time left to expiration is higher than Watchdog_Thresholds.HIGHEST. 
Verify also that in this case the close_ComputeEngine_Runnable flag is set to true and the TCP conenction is closed
		Test Run 5 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] ClientMessage_ACK received when neither 1h_watchdog: 36.0 [s] nor 24h_watchdog: 10.0 [s] is close to expire
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
[Compute engine Runnable 1] Neither 1hWatchdog nor 24hWatchdog have not been kicked
		Test Run 5 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 6 Purpose:
Verify that the run() function updates the request_measurement_history flag to true if ClientMessage_ACK has been received when Global_24h_Watchdog time left to expiration is lower than Watchdog_Thresholds.HIGHEST.
		Test Run 6 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] 1h_Watchdog global: 	35.957
[Compute engine Runnable 1] 24h_Watchdog global: 	0.56
[Compute engine Runnable 1] 24h_Watchdog with delay for ServerMessage_Request_MeasurementHistory (Local_24h_watchdog): 	0.56
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementHistory.
[Compute engine Runnable 1] Request_MeasurementHistory is sent to sensor ID: 1
		Test Run 6 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 7 Purpose:
Verify that the run() function updates Local_24h_watchdog based on Global_24h_Watchdog time left to expiration by setting some delay 
in order to synchronize Local_24h_Watchdogs for multiple sensor that are running in parallel threads if ClientMessage_ACK has been received when Global_24h_Watchdog time left to expiration is lower than Watchdog_Thresholds.HIGHEST.
		Test Run 7 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] 1h_Watchdog global: 	35.957
[Compute engine Runnable 1] 24h_Watchdog global: 	0.56
[Compute engine Runnable 1] 24h_Watchdog with delay for ServerMessage_Request_MeasurementHistory (Local_24h_watchdog): 	0.56
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementHistory.
[Compute engine Runnable 1] Request_MeasurementHistory is sent to sensor ID: 1
		Test Run 7 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 8 Purpose:
Verify that the run() function does not update the request_measurement_history flag to true while it sets the close_ComputeEngine_Runnable flag to true if ClientMessage_ACK has been received when Global_24h_Watchdog has expired
		Test Run 8 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] 1h_Watchdog global: 	35.956
[Compute engine Runnable 1] 24h_Watchdog global: 	0.0
[Compute engine Runnable 1] 24h_Watchdog with delay for ServerMessage_Request_MeasurementHistory (Local_24h_watchdog): 	0.0
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
[Compute engine Runnable 1] Neither 1hWatchdog nor 24hWatchdog have not been kicked
		Test Run 8 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 9 Purpose:
Verify that the run() function responds to ClientMessage_ACK as follows: 
1) with ServerMessage_Request_MeasurementData if request_measurement_data is set to true, 
 2) with ServerMessage_Request_MeasurementHistory if request_measurement_history is set to true, 
 3) does not respond and sets the isComputeEngine_Runnable_running to false if close_ComputeEngine_Runnable is set to true
		Test Run 9 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.3995 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.755 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.755
[Compute engine Runnable 1] 24h_Watchdog global: 	0.8
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.3995
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] 1h_Watchdog global: 	35.999
[Compute engine Runnable 1] 24h_Watchdog global: 	0.8
[Compute engine Runnable 1] 24h_Watchdog with delay for ServerMessage_Request_MeasurementHistory (Local_24h_watchdog): 	0.8
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementHistory.
[Compute engine Runnable 1] Request_MeasurementHistory is sent to sensor ID: 1
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] ClientMessage_ACK received when neither 1h_watchdog: 36.0 [s] nor 24h_watchdog: 864.0 [s] is close to expire
[Compute engine Runnable 1] does not respond to ClientMessage_ACK.
[Compute engine Runnable 1] TCP connection with sensor: 1 is being closed
[Compute engine Runnable 1] Neither 1hWatchdog nor 24hWatchdog have not been kicked
[Compute engine Runnable 1] there are 1 measurement(s) more remaining to kick 24hWatchdog
		Test Run 9 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 9, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 8.357 sec - in tcpServer.Run_ClientMessage_ACKTest
Running tcpServer.Run_ClientMessage_BootUpTest
		Test Run 1 Purpose:
Verify that the run() function responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_BootUp from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_BootUp with ServerMessage_SensorInfoQuerry.
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.224 sec - in tcpServer.Run_ClientMessage_BootUpTest
Running tcpServer.Run_ClientMessage_MeasurementDataTest
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 1 Purpose:
Verify that once the run() function receives ClientMessage_MeasurementData, this measurement data is serialized and saved in Sensors_PATH directory on the PC disc
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.6 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.857 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.857
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.6
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.6
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 2 Purpose:
Verify that once the run() function receives ClientMessage_MeasurementData, the sensor instance in Server_Sensors_LIST is updated with this measurement data
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.5995 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.858 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.858
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.5995
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.5995
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 3 Purpose:
Verify that the run() updates index that represents the sensor in _1hWatchog_timestamp_table to true and kicks Local_1h_Watchdog if ClientMessage_MeasurementData was received
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.6 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.857 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.857
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.6
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.6
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 4 Purpose:
Verify that the run() function responds to ClientMessage_MeasurementData with ServerMessage_ACK
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_ACK from sensor: 1 has been received.
[Compute engine Runnable 1] _1h_watchdog equals : 0.5995 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] Global_1h_Watchdog equals : 0.857 when leaving _1h_Watchdog_close_to_expire()
[Compute engine Runnable 1] 1h_Watchdog global: 	0.857
[Compute engine Runnable 1] 24h_Watchdog global: 	864.0
[Compute engine Runnable 1] 1h_Watchdog with delay for ServerMessage_Request_MeasurementData (Local_1h_watchdog): 	0.5995
[Compute engine Runnable 1] responds to ClientMessage_ACK with ServerMessage_Request_MeasurementData.
[Compute engine Runnable 1] Request_MeasurementData is sent to sensor ID: 1
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.5995
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.248 sec - in tcpServer.Run_ClientMessage_MeasurementDataTest
Running tcpServer.Run_ClientMessage_MeasurementHistoryTest
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 1 Purpose:
Verify that the run() function responds to ClientMessage_MeasurementHistory with ServerMessage_SensorInfoUpdate
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] MeasurementHistory from sensor: 1 has been received.
[Compute engine Processing 1] New folder for MeasurementHistory created
[Compute engine Runnable 1] Local_24h_watchdog has been kicked for sensor: 1 and it is equal to: 864.0
[Compute engine Runnable 1] responds to ClientMessage_MeasurementHistory with ServerMessage_SensorInfoUpdate.
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 2 Purpose:
Verify that the run() updates index that represents the sensor in _24hWatchog_timestamp_table to true and kicks Local_24h_Watchdog if ClientMessage_MeasurementHistory was received
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] MeasurementHistory from sensor: 1 has been received.
[Compute engine Processing 1] New folder for MeasurementHistory created
[Compute engine Runnable 1] Local_24h_watchdog has been kicked for sensor: 1 and it is equal to: 864.0
[Compute engine Runnable 1] responds to ClientMessage_MeasurementHistory with ServerMessage_SensorInfoUpdate.
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 3 Purpose:
Verify that once the run() function receives ClientMessage_MeasurementHistory, this measurement history is serialized and saved in Sensors_PATH directory on the disc
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.799
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] MeasurementHistory from sensor: 1 has been received.
[Compute engine Processing 1] New folder for MeasurementHistory created
[Compute engine Runnable 1] Local_24h_watchdog has been kicked for sensor: 1 and it is equal to: 864.0
[Compute engine Runnable 1] responds to ClientMessage_MeasurementHistory with ServerMessage_SensorInfoUpdate.
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 4 Purpose:
Verify that once the run() function receives ClientMessage_MeasurementHistory, after saving the measurement history, the sesnor is reset and its instance in Server_Sensors_LIST is updated
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Processing 1] New folder for MeasurementData created
[Compute engine Runnable 1] Local_1h_watchdog has been kicked for sensor: 1 and it is equal to: 36.8
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_MeasurementData with ServerMessage_ACK.
[Compute engine Runnable 1] MeasurementData from sensor: 1 has been received.
[Compute engine Runnable 1] MeasurementHistory from sensor: 1 has been received.
[Compute engine Processing 1] New folder for MeasurementHistory created
[Compute engine Runnable 1] Local_24h_watchdog has been kicked for sensor: 1 and it is equal to: 864.0
[Compute engine Runnable 1] responds to ClientMessage_MeasurementHistory with ServerMessage_SensorInfoUpdate.
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 4, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 5.977 sec - in tcpServer.Run_ClientMessage_MeasurementHistoryTest
Running tcpServer.Run_ClientMessage_SensorInfoTest
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 1 Purpose:
Verify that the run() function responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate in case of configuration match between sensors on the server and client side
		Test Run 1 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Runnable 1] send go to OPERATIONAL to sensor: 1
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 2 Purpose:
Verify that the run() function responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate in case of configuration mismatch between sensors on the server and client side
		Test Run 2 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Runnable 1] send new setting (go to MAINTENANCE) to sensor: 1
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 3 Purpose:
Verify that the run() function updates SensorState to OPERATIONAL and saves the current sensor info on PC disc with the "_gotoOPERATIONALafterRESET " extension if 
 ClientMessage_SensorInfo is received when sensor was in PRE_OPERATIONAL SensorState
		Test Run 3 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
[Compute engine Runnable 1] send go to OPERATIONAL to sensor: 1
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 4 Purpose:
Verify that the run() function updates SensorState to OPERATIONAL and saves the current sensor info on PC disc with the "gotoOPERATIONALafterCONFIGURATION " extension if 
 ClientMessage_SensorInfo is received when sensor was in MAINETANCE SensorState
		Test Run 4 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
[Compute engine Runnable 1] send go to OPERATIONAL to sensor: 1
		Test Run 4 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 5 Purpose:
Verify that the run() function updates SensorState to OPERATIONAL and saves the current sensor info on PC disc with the "stayinOPERATIONAL " extension if 
 ClientMessage_SensorInfo is received when sensor was in OPERATIONAL SensorState
		Test Run 5 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
[Compute engine Runnable 1] send go to OPERATIONAL to sensor: 1
		Test Run 5 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
		Test Run 6 Purpose:
Verify that the run() function updates SensorState to MAINETANCE and saves the current sensor info on PC disc with the "gotoMAINTENANCEafterINITIALIZATION " extension if 
 ClientMessage_SensorInfo is received when there was configuration mismatch between sensors on the server and client side
		Test Run 6 Logic:
Server Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
[Compute engine Runnable 1] ClientMessage_SensorInfo message from sensor: 1 has been received.
[Compute engine Processing 1] New folder for a sensor instance created
[Compute engine Processing 1] New folder for a sensor info created
[Compute engine Runnable 1] responds to ClientMessage_SensorInfo with ServerMessage_SensorInfoUpdate.
[Compute engine Runnable 1] send new setting (go to MAINTENANCE) to sensor: 1
		Test Run 6 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 6, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 1.744 sec - in tcpServer.Run_ClientMessage_SensorInfoTest
Running tcpServer.SendMessageTest
		Test Run 1 Purpose:
Verify that the sendMessage() function for a ComputeEngine_Runnable class instance writes an object to the previously opened object output stream
		Test Run 1 Logic:
mockTCPserver Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 1 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 2 Purpose:
Verify that SocketException is thrown if there was an attempt to call the sendMessage() function for a ComputeEngine_Runnable class instance that has its object output stream closed
		Test Run 2 Logic:
mockTCPserver Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 2 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

		Test Run 3 Purpose:
Verify that NotSerializableException is thrown if there was an attempt to send a message that does not implement serializable interface via the sendMessage() function for a ComputeEngine_Runnable class instance
		Test Run 3 Logic:
mockTCPserver Thread Started.
[Compute engine Runnable] Multithreaded Server Service has been started
		Test Run 3 teardown section:
Server Thread Stopped.
Serversocket closed
[TCPserver] all attributes of the static TCPserver class are reinitialized to default values

Tests run: 3, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 0.463 sec - in tcpServer.SendMessageTest

Results :

Tests run: 72, Failures: 0, Errors: 0, Skipped: 0

[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time: 38.668 s
[INFO] Finished at: 2018-08-24T19:57:20+02:00
[INFO] ------------------------------------------------------------------------
Triggering a new build of [8mha:////4CATCI8xZm8ypGiGM2uhV/v3z8YYedBB/acp/O/MVch7AAAAtR+LCAAAAAAAAP9b85aBtbiIQTGjNKU4P08vOT+vOD8nVc83PyU1x6OyILUoJzMv2y+/JJUBAhiZGBgqihhk0NSjKDWzXb3RdlLBUSYGJk8GtpzUvPSSDB8G5tKinBIGIZ+sxLJE/ZzEvHT94JKizLx0a6BxUmjGOUNodHsLgAzlEgZN/az8JH1nz/iS/Pyc+KLSvPjMvJLU9KLEksz8vPjixLzMksr4ktTiEn0A1siGYN4AAAA=[0mCI_tool_run_integration_sanity_test
Finished: SUCCESS
